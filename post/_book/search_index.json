[
["_main.html", "Modes vs Options", " Modes vs Options Akshay Malik 2020-01-27 0.0.1 Why is this useful ? Initially, difference between transportation modes and transportation options described here may seem to be semantic at first. But if examined closely, it reveals significant implications on how transportation infrastructure gets analyzed, financed, managed and delivered to users. It also points to wider impacts on other planning functions such as land use planning, local tax policy and real estate development. The goal is to provide an alternative way of classifying all the choices people have today to transport goods and people, especially in the urban setting. The driver for such a thought is use of data as an added classifier on top of the vehicle being use for physical movement. 0.0.2 OK, so what is the difference ? Transportation Mode refers to different ways by which goods or people are transported from one place to the other through land, air or sea. This is used across all transportation planning and engineering literature. It classifies ways broadly based on the physical vehicle being used for the movement. The term I want to introduce and position differently is Transportation Option. This, in the context of this post, refers to ways people, goods and data (about people/goods) move around from one place to another. This may need some rewording but that’s why this is part of a blog and not a PhD. Lets take a few examples to establish the difference. In the case of road transportation, a car is ONE MODE of transportation for planners and engineers trying to fix the system. But if you add data into the mix - who owns the vehicle, who drives it and how is the users of the vehicle getting information about how to use it - you will start appreciating the difference her. Now, think about these FOUR CHOICES for that ONE MODE: Drive your own car Drive someone else’s car (Zipcar) Be driven by someone else in their car (Uber/Lyft) Take a taxi (Yellow Cab in NY or Black Cab in London). Each choice here, from a perspective of traditional transportation planning, uses the same traditional mode of ‘driving a car’ on a public street. But the are different in a number of ways: OWNERSHIP - Zipcar and Uber are owned by companies, but your car is owned by you and a taxi is most likely owned by the drive. STORAGE - Your car is parked in your garage, the Uber driver parks her car in her garage, and the taxi stays at yard or lot when not being used. DATA - Uber uses an app to get you home, Zipcar has its app but also has a fancy locker at the lot, but you could whistle loudly for a taxi to stop. Lets take another common example to showcase the difference between modes and options. Trains and trolleys, although may have similar ownership structures in a given city and fall within the mode of ‘public transit’, their data infrastructure is quite different. from an operations perspective and hence are two different travel options. 0.0.3 Why study transportation systems as data systems? Today, it has become difficult and critical to manage the transportation infrastructure in the City because of the following three factors: an increase in the number of travel options or choices a rise in data exchange to share availability of service for each option in real-time growing entanglement through use of smart phones among these travel choices to form complex journeys for each user across a shared physical landscape. The last point here is the most important to unpack. Entanglement refers to interconnection and interdependence of different choices of travel to support a user in moving across urban areas. One may take an electric scooter to the nearest subway and then take a train to their destination while paying for both through their smart watch. Hence today’s urban interconnected infrastructure is no longer restricted to the cart-way or the sidewalk but includes our smart phones and smart cards as well. This interdependence between the physical realm, where we move, and the virtual realm, where we share our information, demands better coordination from people who manage it. People managing these systems from an operational lens do not have capacity to develop frameworks for allowing data systems to be part of their work. This must come from the academic world and must be developed in a way that allows realistic transitions from legacy systems for many agencies / governments whose resources are already stretched thin for daily operations. Having worked for the City for over two years, I have had the pleasure and priveledge of working with a group of hard working and talented government employees. This time and interaction has allowed me to see that lack of resources has caused several people hours to go waste in doing tasks that should clearly be automated. This situation encouraged me to start this running list of systems that the City needs desperately. Some of them have been identified and their procurement is just stuck in some red-tape stuff. Others are yet to be identified or have political issues as serious barriers to moving forward. So here it is: Street Closure Permitting System Crash Data Management System 0.0.4 What are we making The final product looks like this. This is under active development and may not seem like much before it gets completely polished. But there are several interesting concepts that were used here and I want to share some of there through this post. 0.0.5 Data The data for this is setup using 0.0.6 Why make a blog This question is reasonable as there are several options such as Medium or Wordpress that can help one get setup with a blog without much trouble. The reasons I decided to setup my own blog are as follows: Show off R skills - I wanted to have a blog specifically to show off data science work. Setting up a blog using Rstudio provides me with a straight forward R project to get started on. Rmarkdown is much better at presenting analytical work than markdown (Jekyll). Efficient Workflow - Having a work flow setup that allows publishing directly from Rstudio allows is very convinient and allows me to focus on content once I have everything setup. Design - Being a trained architect, I cannot work on a system that does not allow me full control of how it looks. May be a bit of OCD here but that’s just me. 0.0.7 Disclaimer Not intented to teach others but for personal documentation. Others are free to learn tho if the documentation makes sense. 0.0.8 Components All that was needed to come together for this blog to work is as follows: RStudio Blogdown Hugo Github Pages 0.0.9 Overview of the Setup This blog is an extension to my named website www.akshaymalik.com. I bought the domain from Google domains for about $12 per year. Then I created a github account and using Github Pages created a landing page with some basic html and css. I did scrape the css from mdo just because it is one of the best minimalistic layout and design I have seen. At this point I had a landing page with some links all at a url https://akshay-malik.github.io. To make it point to the domain name I bought from Google, I go the settings tab on the github repo and scroll down to the section with the header Github Pages. Here I need to enter under custom domain, the name of my domain like so: Addtitionally, a file must be added to the repo called CNAME and all it needs to contain is the url you are pointing it to, in this case www.akshaymalik.com. You need to fix a few things in your domain setting as well but that is something that google has good documentation on and I cannnot cover that here. Now, with a landing page and the url setup, next step was to setup the pipeline to write content from RStudio and have it tranlated to a webpage. This is achieved using Blogdown. This library in RStudio uses Hugo to translate Rmarkdown into HTML/CSS/Js. Additionally, it allows charts and all the great visualizations from RStudio to be made into a webpage without me writing any code for it. 0.0.10 RStudio Download the latest version from here and open/run the application on your system/computer. If you are not familiar with this software, I recommend checking out some free courses by DataCamp to get started. Here’s the nickle tour: Once setup and run, you will see the default arrangement as seen in the image below The code is typed in the upper left box Files (similar to Finder/Explorer) are seen in bottom right Logs of the code running are seen in the Console panel in the bottom left Top right panel has various functional tabs but the most I end up using here is access to stored variables that get generated in a given project or data imported. Check out any number of tutorials on how to write code in Rstudio. 0.0.11 Blogdown This is a good tool to develop a website but it has some basic functional requirements to get started with a blog. I highly recommend going through the documentation here. Here are some good links to walk through the process of setting up a blog using blogdown: - Alison Hill - Emily Zabor These were the two that I used. I am sure a good google search may lead to some more recent results on blogdown and setting up a blog. But that is just half the story. Once you have everything setup, for someone like me who really wants full control of the design aspect of the pages, it was key to know how to setup the CSS and Hugo to get the desired results on TAGS and CATEGORIES. 0.0.12 Hugo To get a sense of how Hugo worked, I tried to wrap my head around some basic concepts such as: - partial templates - [] # simple table creation here | Tables | Are | Cool | |—————|:————-:|——:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | "]
]
